
PostLab_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  00000932  000009c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000932  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800192  00800192  00000a58  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ab4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cf2  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a40  00000000  00000000  00001846  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052f  00000000  00000000  00002286  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  000027b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054b  00000000  00000000  000028bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b0  00000000  00000000  00002e07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002fb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_18>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 e3       	ldi	r30, 0x32	; 50
  c8:	f9 e0       	ldi	r31, 0x09	; 9
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 39       	cpi	r26, 0x92	; 146
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a2 e9       	ldi	r26, 0x92	; 146
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a1 3a       	cpi	r26, 0xA1	; 161
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <main>
  ea:	0c 94 97 04 	jmp	0x92e	; 0x92e <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <initUART>:
	UBRR0 = 207;
}

void writeUART(char caracter){
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = caracter;
  f2:	8a b1       	in	r24, 0x0a	; 10
  f4:	8e 7f       	andi	r24, 0xFE	; 254
  f6:	8a b9       	out	0x0a, r24	; 10
  f8:	8a b1       	in	r24, 0x0a	; 10
  fa:	82 60       	ori	r24, 0x02	; 2
  fc:	8a b9       	out	0x0a, r24	; 10
  fe:	e0 ec       	ldi	r30, 0xC0	; 192
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	10 82       	st	Z, r1
 104:	80 81       	ld	r24, Z
 106:	82 60       	ori	r24, 0x02	; 2
 108:	80 83       	st	Z, r24
 10a:	e1 ec       	ldi	r30, 0xC1	; 193
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	10 82       	st	Z, r1
 110:	80 81       	ld	r24, Z
 112:	88 69       	ori	r24, 0x98	; 152
 114:	80 83       	st	Z, r24
 116:	e2 ec       	ldi	r30, 0xC2	; 194
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	10 82       	st	Z, r1
 11c:	80 81       	ld	r24, Z
 11e:	86 60       	ori	r24, 0x06	; 6
 120:	80 83       	st	Z, r24
 122:	8f ec       	ldi	r24, 0xCF	; 207
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 12a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 12e:	08 95       	ret

00000130 <writeTextUART>:
}
	
void writeTextUART(char* texto){
 130:	ac 01       	movw	r20, r24
	uint8_t i;
	for (i=0; texto[i] != '\0'; i++){
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	07 c0       	rjmp	.+14     	; 0x144 <writeTextUART+0x14>
		while(!(UCSR0A&(1<<UDRE0)));
 136:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 13a:	95 ff       	sbrs	r25, 5
 13c:	fc cf       	rjmp	.-8      	; 0x136 <writeTextUART+0x6>
		UDR0 = texto[i];
 13e:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	UDR0 = caracter;
}
	
void writeTextUART(char* texto){
	uint8_t i;
	for (i=0; texto[i] != '\0'; i++){
 142:	2f 5f       	subi	r18, 0xFF	; 255
 144:	fa 01       	movw	r30, r20
 146:	e2 0f       	add	r30, r18
 148:	f1 1d       	adc	r31, r1
 14a:	30 81       	ld	r19, Z
 14c:	31 11       	cpse	r19, r1
 14e:	f3 cf       	rjmp	.-26     	; 0x136 <writeTextUART+0x6>
		while(!(UCSR0A&(1<<UDRE0)));
		UDR0 = texto[i];
	}
}
 150:	08 95       	ret

00000152 <asciiVal>:
		} else if (buffLast > 255) {
		buffLast = 255; // Limitar a 255 si es mayor
	}

	// Desplazamiento de bits
	PORTD = (buffLast << 2) & 0xFC; // Muestra los bits 2-7 en PORTD (PD2 a PD7)
 152:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	8b b9       	out	0x0b, r24	; 11
	PORTB = (buffLast >> 6) & 0x03; // Muestra los bits 6-7 en PORTB (PB0 y PB1)
 162:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 166:	82 95       	swap	r24
 168:	86 95       	lsr	r24
 16a:	86 95       	lsr	r24
 16c:	83 70       	andi	r24, 0x03	; 3
 16e:	85 b9       	out	0x05, r24	; 5
 170:	08 95       	ret

00000172 <MenuL0>:
	PORTD = buffLast<<2;
	PORTB = buffLast>>6;
}*/

void MenuL0(){
	writeTextUART("\nElige una opción:\n");
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	0e 94 98 00 	call	0x130	; 0x130 <writeTextUART>
	writeTextUART("1. Leer potenciometro\n");
 17a:	85 e1       	ldi	r24, 0x15	; 21
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 98 00 	call	0x130	; 0x130 <writeTextUART>
	writeTextUART("2. Enviar Ascii\n");
 182:	8c e2       	ldi	r24, 0x2C	; 44
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	0e 94 98 00 	call	0x130	; 0x130 <writeTextUART>
 18a:	08 95       	ret

0000018c <__vector_18>:
		while(!(UCSR0A&(1<<UDRE0)));
		UDR0 = texto[i];
	}
}

ISR(USART0_RX_vect){
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	2f 93       	push	r18
 198:	3f 93       	push	r19
 19a:	4f 93       	push	r20
 19c:	5f 93       	push	r21
 19e:	6f 93       	push	r22
 1a0:	7f 93       	push	r23
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
 1a6:	af 93       	push	r26
 1a8:	bf 93       	push	r27
 1aa:	ef 93       	push	r30
 1ac:	ff 93       	push	r31
	bufferRX = UDR0;
 1ae:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1b2:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <bufferRX>
	if(StateAscii >= 1) {
 1b6:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <StateAscii>
 1ba:	88 23       	and	r24, r24
 1bc:	39 f0       	breq	.+14     	; 0x1cc <__vector_18+0x40>
		PORTB |= (1<<PB5);
 1be:	85 b1       	in	r24, 0x05	; 5
 1c0:	80 62       	ori	r24, 0x20	; 32
 1c2:	85 b9       	out	0x05, r24	; 5
		buffLast = bufferRX;
 1c4:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <bufferRX>
 1c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	while(!(UCSR0A&(1<<UDRE0)));
 1cc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1d0:	85 ff       	sbrs	r24, 5
 1d2:	fc cf       	rjmp	.-8      	; 0x1cc <__vector_18+0x40>
	UDR0 = bufferRX;
 1d4:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <bufferRX>
 1d8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	if (StateAscii >= 1){
 1dc:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <StateAscii>
 1e0:	88 23       	and	r24, r24
 1e2:	49 f0       	breq	.+18     	; 0x1f6 <__vector_18+0x6a>
		StateAscii++;
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <StateAscii>
		if (StateAscii >= 2){
 1ea:	82 30       	cpi	r24, 0x02	; 2
 1ec:	20 f0       	brcs	.+8      	; 0x1f6 <__vector_18+0x6a>
			StateAscii = 0;
 1ee:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <StateAscii>
			MenuL0();
 1f2:	0e 94 b9 00 	call	0x172	; 0x172 <MenuL0>
		}
	}
	if (StatePot == 1){
 1f6:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	41 f4       	brne	.+16     	; 0x20e <__vector_18+0x82>
		if (bufferRX == '0'){
 1fe:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <bufferRX>
 202:	80 33       	cpi	r24, 0x30	; 48
 204:	21 f4       	brne	.+8      	; 0x20e <__vector_18+0x82>
			StatePot = 0;
 206:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <__data_end>
			MenuL0();
 20a:	0e 94 b9 00 	call	0x172	; 0x172 <MenuL0>
		}
	}
	if (bufferRX == '1'){
 20e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <bufferRX>
 212:	81 33       	cpi	r24, 0x31	; 49
 214:	81 f4       	brne	.+32     	; 0x236 <__vector_18+0xaa>
		if (StateAscii == 0){
 216:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <StateAscii>
 21a:	81 11       	cpse	r24, r1
 21c:	21 c0       	rjmp	.+66     	; 0x260 <__vector_18+0xd4>
			writeTextUART("\nValor Potenciometro\n");
 21e:	8d e3       	ldi	r24, 0x3D	; 61
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	0e 94 98 00 	call	0x130	; 0x130 <writeTextUART>
			writeTextUART("Escribir 0 para volver\n");
 226:	83 e5       	ldi	r24, 0x53	; 83
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 98 00 	call	0x130	; 0x130 <writeTextUART>
			StatePot = 1;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
 234:	15 c0       	rjmp	.+42     	; 0x260 <__vector_18+0xd4>
		}
	} else if (bufferRX == '2'){
 236:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <bufferRX>
 23a:	82 33       	cpi	r24, 0x32	; 50
 23c:	89 f4       	brne	.+34     	; 0x260 <__vector_18+0xd4>
		if (StateAscii == 0){
 23e:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <StateAscii>
 242:	81 11       	cpse	r24, r1
 244:	0d c0       	rjmp	.+26     	; 0x260 <__vector_18+0xd4>
			writeTextUART("\nAscci\n");
 246:	8b e6       	ldi	r24, 0x6B	; 107
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	0e 94 98 00 	call	0x130	; 0x130 <writeTextUART>
			writeTextUART("\nEscribe tu código Ascii:\n");
 24e:	83 e7       	ldi	r24, 0x73	; 115
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	0e 94 98 00 	call	0x130	; 0x130 <writeTextUART>
			StateAscii = 1;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <StateAscii>
			PORTD = 0;
 25c:	1b b8       	out	0x0b, r1	; 11
			PORTB = 0;
 25e:	15 b8       	out	0x05, r1	; 5
		}
	}
}
 260:	ff 91       	pop	r31
 262:	ef 91       	pop	r30
 264:	bf 91       	pop	r27
 266:	af 91       	pop	r26
 268:	9f 91       	pop	r25
 26a:	8f 91       	pop	r24
 26c:	7f 91       	pop	r23
 26e:	6f 91       	pop	r22
 270:	5f 91       	pop	r21
 272:	4f 91       	pop	r20
 274:	3f 91       	pop	r19
 276:	2f 91       	pop	r18
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <ADC_init>:
	writeTextUART("1. Leer potenciometro\n");
	writeTextUART("2. Enviar Ascii\n");
}
void ADC_init(void)
{
	ADMUX |=  (1<<REFS0);		//Seleccionar el voltaje de referencia
 282:	ec e7       	ldi	r30, 0x7C	; 124
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	80 64       	ori	r24, 0x40	; 64
 28a:	80 83       	st	Z, r24
	ADMUX &=~ (1<<REFS1);
 28c:	80 81       	ld	r24, Z
 28e:	8f 77       	andi	r24, 0x7F	; 127
 290:	80 83       	st	Z, r24
	ADMUX &=~ (1<<ADLAR);		//Ajustar el resultado
 292:	80 81       	ld	r24, Z
 294:	8f 7d       	andi	r24, 0xDF	; 223
 296:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADPS0);		// divisor = 128  16000/128 = 125 KHz
 298:	ea e7       	ldi	r30, 0x7A	; 122
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	81 60       	ori	r24, 0x01	; 1
 2a0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS1);
 2a2:	80 81       	ld	r24, Z
 2a4:	82 60       	ori	r24, 0x02	; 2
 2a6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2);
 2a8:	80 81       	ld	r24, Z
 2aa:	84 60       	ori	r24, 0x04	; 4
 2ac:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);		// Encendemos en ADC
 2ae:	80 81       	ld	r24, Z
 2b0:	80 68       	ori	r24, 0x80	; 128
 2b2:	80 83       	st	Z, r24
 2b4:	08 95       	ret

000002b6 <adcRead>:
}

uint16_t adcRead(uint8_t canal)
{
	canal &= 0b00000111;            // Limitar la entrada a canales 0-7 (la mayoría de AVR tienen 8 canales ADC)
 2b6:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF0) | canal; // Conservar los 4 bits superiores (config) y establecer los bits de selección de canal
 2b8:	ec e7       	ldi	r30, 0x7C	; 124
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	90 81       	ld	r25, Z
 2be:	90 7f       	andi	r25, 0xF0	; 240
 2c0:	89 2b       	or	r24, r25
 2c2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);            // Inicia la conversión
 2c4:	ea e7       	ldi	r30, 0x7A	; 122
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
 2ca:	80 64       	ori	r24, 0x40	; 64
 2cc:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));      // Esperar hasta que se complete la conversión
 2ce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2d2:	86 fd       	sbrc	r24, 6
 2d4:	fc cf       	rjmp	.-8      	; 0x2ce <adcRead+0x18>
	return ADC;                     // Devolver el valor del ADC
 2d6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 2da:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 2de:	08 95       	ret

000002e0 <main>:

volatile char bufferRX;

int main(void)
{
	initUART();
 2e0:	0e 94 79 00 	call	0xf2	; 0xf2 <initUART>
	ADC_init();
 2e4:	0e 94 41 01 	call	0x282	; 0x282 <ADC_init>
	
	sei();
 2e8:	78 94       	sei
	DDRD = 0xFF;
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
 2ec:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
 2ee:	84 b9       	out	0x04, r24	; 4
	
	MenuL0();
 2f0:	0e 94 b9 00 	call	0x172	; 0x172 <MenuL0>
	PORTD = 0;
 2f4:	1b b8       	out	0x0b, r1	; 11
	PORTB = 0;
 2f6:	15 b8       	out	0x05, r1	; 5
	
	while (1){
		asciiVal();
 2f8:	0e 94 a9 00 	call	0x152	; 0x152 <asciiVal>
		if (StatePot == 1){
 2fc:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	d1 f7       	brne	.-12     	; 0x2f8 <main+0x18>
			adcValue1 = adcRead(5);
 304:	85 e0       	ldi	r24, 0x05	; 5
 306:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <adcRead>
 30a:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <adcValue1>
 30e:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <adcValue1+0x1>
			
			//Convertir el valor int en una cadena de de caracteres
			sprintf(buffer, "%d", adcValue1);
 312:	9f 93       	push	r25
 314:	8f 93       	push	r24
 316:	8e e8       	ldi	r24, 0x8E	; 142
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	9f 93       	push	r25
 31c:	8f 93       	push	r24
 31e:	86 e9       	ldi	r24, 0x96	; 150
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	9f 93       	push	r25
 324:	8f 93       	push	r24
 326:	0e 94 ad 01 	call	0x35a	; 0x35a <sprintf>
			
			//Enviar la cadena de caracteres por el puerto serie
			writeTextUART(buffer);
 32a:	86 e9       	ldi	r24, 0x96	; 150
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	0e 94 98 00 	call	0x130	; 0x130 <writeTextUART>
			
			writeTextUART("\n");
 332:	8c e8       	ldi	r24, 0x8C	; 140
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	0e 94 98 00 	call	0x130	; 0x130 <writeTextUART>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33a:	2f ef       	ldi	r18, 0xFF	; 255
 33c:	83 ed       	ldi	r24, 0xD3	; 211
 33e:	90 e3       	ldi	r25, 0x30	; 48
 340:	21 50       	subi	r18, 0x01	; 1
 342:	80 40       	sbci	r24, 0x00	; 0
 344:	90 40       	sbci	r25, 0x00	; 0
 346:	e1 f7       	brne	.-8      	; 0x340 <main+0x60>
 348:	00 c0       	rjmp	.+0      	; 0x34a <main+0x6a>
 34a:	00 00       	nop
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	0f 90       	pop	r0
 352:	0f 90       	pop	r0
 354:	0f 90       	pop	r0
 356:	0f 90       	pop	r0
 358:	cf cf       	rjmp	.-98     	; 0x2f8 <main+0x18>

0000035a <sprintf>:
 35a:	ae e0       	ldi	r26, 0x0E	; 14
 35c:	b0 e0       	ldi	r27, 0x00	; 0
 35e:	e3 eb       	ldi	r30, 0xB3	; 179
 360:	f1 e0       	ldi	r31, 0x01	; 1
 362:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__prologue_saves__+0x1c>
 366:	0d 89       	ldd	r16, Y+21	; 0x15
 368:	1e 89       	ldd	r17, Y+22	; 0x16
 36a:	86 e0       	ldi	r24, 0x06	; 6
 36c:	8c 83       	std	Y+4, r24	; 0x04
 36e:	1a 83       	std	Y+2, r17	; 0x02
 370:	09 83       	std	Y+1, r16	; 0x01
 372:	8f ef       	ldi	r24, 0xFF	; 255
 374:	9f e7       	ldi	r25, 0x7F	; 127
 376:	9e 83       	std	Y+6, r25	; 0x06
 378:	8d 83       	std	Y+5, r24	; 0x05
 37a:	ae 01       	movw	r20, r28
 37c:	47 5e       	subi	r20, 0xE7	; 231
 37e:	5f 4f       	sbci	r21, 0xFF	; 255
 380:	6f 89       	ldd	r22, Y+23	; 0x17
 382:	78 8d       	ldd	r23, Y+24	; 0x18
 384:	ce 01       	movw	r24, r28
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	0e 94 cf 01 	call	0x39e	; 0x39e <vfprintf>
 38c:	ef 81       	ldd	r30, Y+7	; 0x07
 38e:	f8 85       	ldd	r31, Y+8	; 0x08
 390:	e0 0f       	add	r30, r16
 392:	f1 1f       	adc	r31, r17
 394:	10 82       	st	Z, r1
 396:	2e 96       	adiw	r28, 0x0e	; 14
 398:	e4 e0       	ldi	r30, 0x04	; 4
 39a:	0c 94 8a 04 	jmp	0x914	; 0x914 <__stack+0x15>

0000039e <vfprintf>:
 39e:	ab e0       	ldi	r26, 0x0B	; 11
 3a0:	b0 e0       	ldi	r27, 0x00	; 0
 3a2:	e5 ed       	ldi	r30, 0xD5	; 213
 3a4:	f1 e0       	ldi	r31, 0x01	; 1
 3a6:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__prologue_saves__>
 3aa:	6c 01       	movw	r12, r24
 3ac:	7b 01       	movw	r14, r22
 3ae:	8a 01       	movw	r16, r20
 3b0:	fc 01       	movw	r30, r24
 3b2:	17 82       	std	Z+7, r1	; 0x07
 3b4:	16 82       	std	Z+6, r1	; 0x06
 3b6:	83 81       	ldd	r24, Z+3	; 0x03
 3b8:	81 ff       	sbrs	r24, 1
 3ba:	cc c1       	rjmp	.+920    	; 0x754 <__EEPROM_REGION_LENGTH__+0x354>
 3bc:	ce 01       	movw	r24, r28
 3be:	01 96       	adiw	r24, 0x01	; 1
 3c0:	3c 01       	movw	r6, r24
 3c2:	f6 01       	movw	r30, r12
 3c4:	93 81       	ldd	r25, Z+3	; 0x03
 3c6:	f7 01       	movw	r30, r14
 3c8:	93 fd       	sbrc	r25, 3
 3ca:	85 91       	lpm	r24, Z+
 3cc:	93 ff       	sbrs	r25, 3
 3ce:	81 91       	ld	r24, Z+
 3d0:	7f 01       	movw	r14, r30
 3d2:	88 23       	and	r24, r24
 3d4:	09 f4       	brne	.+2      	; 0x3d8 <vfprintf+0x3a>
 3d6:	ba c1       	rjmp	.+884    	; 0x74c <__EEPROM_REGION_LENGTH__+0x34c>
 3d8:	85 32       	cpi	r24, 0x25	; 37
 3da:	39 f4       	brne	.+14     	; 0x3ea <vfprintf+0x4c>
 3dc:	93 fd       	sbrc	r25, 3
 3de:	85 91       	lpm	r24, Z+
 3e0:	93 ff       	sbrs	r25, 3
 3e2:	81 91       	ld	r24, Z+
 3e4:	7f 01       	movw	r14, r30
 3e6:	85 32       	cpi	r24, 0x25	; 37
 3e8:	29 f4       	brne	.+10     	; 0x3f4 <vfprintf+0x56>
 3ea:	b6 01       	movw	r22, r12
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 c6 03 	call	0x78c	; 0x78c <fputc>
 3f2:	e7 cf       	rjmp	.-50     	; 0x3c2 <vfprintf+0x24>
 3f4:	91 2c       	mov	r9, r1
 3f6:	21 2c       	mov	r2, r1
 3f8:	31 2c       	mov	r3, r1
 3fa:	ff e1       	ldi	r31, 0x1F	; 31
 3fc:	f3 15       	cp	r31, r3
 3fe:	d8 f0       	brcs	.+54     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 400:	8b 32       	cpi	r24, 0x2B	; 43
 402:	79 f0       	breq	.+30     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 404:	38 f4       	brcc	.+14     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 406:	80 32       	cpi	r24, 0x20	; 32
 408:	79 f0       	breq	.+30     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 40a:	83 32       	cpi	r24, 0x23	; 35
 40c:	a1 f4       	brne	.+40     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 40e:	23 2d       	mov	r18, r3
 410:	20 61       	ori	r18, 0x10	; 16
 412:	1d c0       	rjmp	.+58     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 414:	8d 32       	cpi	r24, 0x2D	; 45
 416:	61 f0       	breq	.+24     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 418:	80 33       	cpi	r24, 0x30	; 48
 41a:	69 f4       	brne	.+26     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 41c:	23 2d       	mov	r18, r3
 41e:	21 60       	ori	r18, 0x01	; 1
 420:	16 c0       	rjmp	.+44     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 422:	83 2d       	mov	r24, r3
 424:	82 60       	ori	r24, 0x02	; 2
 426:	38 2e       	mov	r3, r24
 428:	e3 2d       	mov	r30, r3
 42a:	e4 60       	ori	r30, 0x04	; 4
 42c:	3e 2e       	mov	r3, r30
 42e:	2a c0       	rjmp	.+84     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 430:	f3 2d       	mov	r31, r3
 432:	f8 60       	ori	r31, 0x08	; 8
 434:	1d c0       	rjmp	.+58     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 436:	37 fc       	sbrc	r3, 7
 438:	2d c0       	rjmp	.+90     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 43a:	20 ed       	ldi	r18, 0xD0	; 208
 43c:	28 0f       	add	r18, r24
 43e:	2a 30       	cpi	r18, 0x0A	; 10
 440:	40 f0       	brcs	.+16     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 442:	8e 32       	cpi	r24, 0x2E	; 46
 444:	b9 f4       	brne	.+46     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 446:	36 fc       	sbrc	r3, 6
 448:	81 c1       	rjmp	.+770    	; 0x74c <__EEPROM_REGION_LENGTH__+0x34c>
 44a:	23 2d       	mov	r18, r3
 44c:	20 64       	ori	r18, 0x40	; 64
 44e:	32 2e       	mov	r3, r18
 450:	19 c0       	rjmp	.+50     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 452:	36 fe       	sbrs	r3, 6
 454:	06 c0       	rjmp	.+12     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 456:	8a e0       	ldi	r24, 0x0A	; 10
 458:	98 9e       	mul	r9, r24
 45a:	20 0d       	add	r18, r0
 45c:	11 24       	eor	r1, r1
 45e:	92 2e       	mov	r9, r18
 460:	11 c0       	rjmp	.+34     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 462:	ea e0       	ldi	r30, 0x0A	; 10
 464:	2e 9e       	mul	r2, r30
 466:	20 0d       	add	r18, r0
 468:	11 24       	eor	r1, r1
 46a:	22 2e       	mov	r2, r18
 46c:	f3 2d       	mov	r31, r3
 46e:	f0 62       	ori	r31, 0x20	; 32
 470:	3f 2e       	mov	r3, r31
 472:	08 c0       	rjmp	.+16     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 474:	8c 36       	cpi	r24, 0x6C	; 108
 476:	21 f4       	brne	.+8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 478:	83 2d       	mov	r24, r3
 47a:	80 68       	ori	r24, 0x80	; 128
 47c:	38 2e       	mov	r3, r24
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 480:	88 36       	cpi	r24, 0x68	; 104
 482:	41 f4       	brne	.+16     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 484:	f7 01       	movw	r30, r14
 486:	93 fd       	sbrc	r25, 3
 488:	85 91       	lpm	r24, Z+
 48a:	93 ff       	sbrs	r25, 3
 48c:	81 91       	ld	r24, Z+
 48e:	7f 01       	movw	r14, r30
 490:	81 11       	cpse	r24, r1
 492:	b3 cf       	rjmp	.-154    	; 0x3fa <vfprintf+0x5c>
 494:	98 2f       	mov	r25, r24
 496:	9f 7d       	andi	r25, 0xDF	; 223
 498:	95 54       	subi	r25, 0x45	; 69
 49a:	93 30       	cpi	r25, 0x03	; 3
 49c:	28 f4       	brcc	.+10     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 49e:	0c 5f       	subi	r16, 0xFC	; 252
 4a0:	1f 4f       	sbci	r17, 0xFF	; 255
 4a2:	9f e3       	ldi	r25, 0x3F	; 63
 4a4:	99 83       	std	Y+1, r25	; 0x01
 4a6:	0d c0       	rjmp	.+26     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4a8:	83 36       	cpi	r24, 0x63	; 99
 4aa:	31 f0       	breq	.+12     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4ac:	83 37       	cpi	r24, 0x73	; 115
 4ae:	71 f0       	breq	.+28     	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4b0:	83 35       	cpi	r24, 0x53	; 83
 4b2:	09 f0       	breq	.+2      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4b4:	59 c0       	rjmp	.+178    	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 4b6:	21 c0       	rjmp	.+66     	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 4b8:	f8 01       	movw	r30, r16
 4ba:	80 81       	ld	r24, Z
 4bc:	89 83       	std	Y+1, r24	; 0x01
 4be:	0e 5f       	subi	r16, 0xFE	; 254
 4c0:	1f 4f       	sbci	r17, 0xFF	; 255
 4c2:	88 24       	eor	r8, r8
 4c4:	83 94       	inc	r8
 4c6:	91 2c       	mov	r9, r1
 4c8:	53 01       	movw	r10, r6
 4ca:	13 c0       	rjmp	.+38     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4cc:	28 01       	movw	r4, r16
 4ce:	f2 e0       	ldi	r31, 0x02	; 2
 4d0:	4f 0e       	add	r4, r31
 4d2:	51 1c       	adc	r5, r1
 4d4:	f8 01       	movw	r30, r16
 4d6:	a0 80       	ld	r10, Z
 4d8:	b1 80       	ldd	r11, Z+1	; 0x01
 4da:	36 fe       	sbrs	r3, 6
 4dc:	03 c0       	rjmp	.+6      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4de:	69 2d       	mov	r22, r9
 4e0:	70 e0       	ldi	r23, 0x00	; 0
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4e4:	6f ef       	ldi	r22, 0xFF	; 255
 4e6:	7f ef       	ldi	r23, 0xFF	; 255
 4e8:	c5 01       	movw	r24, r10
 4ea:	0e 94 bb 03 	call	0x776	; 0x776 <strnlen>
 4ee:	4c 01       	movw	r8, r24
 4f0:	82 01       	movw	r16, r4
 4f2:	f3 2d       	mov	r31, r3
 4f4:	ff 77       	andi	r31, 0x7F	; 127
 4f6:	3f 2e       	mov	r3, r31
 4f8:	16 c0       	rjmp	.+44     	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
 4fa:	28 01       	movw	r4, r16
 4fc:	22 e0       	ldi	r18, 0x02	; 2
 4fe:	42 0e       	add	r4, r18
 500:	51 1c       	adc	r5, r1
 502:	f8 01       	movw	r30, r16
 504:	a0 80       	ld	r10, Z
 506:	b1 80       	ldd	r11, Z+1	; 0x01
 508:	36 fe       	sbrs	r3, 6
 50a:	03 c0       	rjmp	.+6      	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
 50c:	69 2d       	mov	r22, r9
 50e:	70 e0       	ldi	r23, 0x00	; 0
 510:	02 c0       	rjmp	.+4      	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 512:	6f ef       	ldi	r22, 0xFF	; 255
 514:	7f ef       	ldi	r23, 0xFF	; 255
 516:	c5 01       	movw	r24, r10
 518:	0e 94 b0 03 	call	0x760	; 0x760 <strnlen_P>
 51c:	4c 01       	movw	r8, r24
 51e:	f3 2d       	mov	r31, r3
 520:	f0 68       	ori	r31, 0x80	; 128
 522:	3f 2e       	mov	r3, r31
 524:	82 01       	movw	r16, r4
 526:	33 fc       	sbrc	r3, 3
 528:	1b c0       	rjmp	.+54     	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
 52a:	82 2d       	mov	r24, r2
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	88 16       	cp	r8, r24
 530:	99 06       	cpc	r9, r25
 532:	b0 f4       	brcc	.+44     	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
 534:	b6 01       	movw	r22, r12
 536:	80 e2       	ldi	r24, 0x20	; 32
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 c6 03 	call	0x78c	; 0x78c <fputc>
 53e:	2a 94       	dec	r2
 540:	f4 cf       	rjmp	.-24     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 542:	f5 01       	movw	r30, r10
 544:	37 fc       	sbrc	r3, 7
 546:	85 91       	lpm	r24, Z+
 548:	37 fe       	sbrs	r3, 7
 54a:	81 91       	ld	r24, Z+
 54c:	5f 01       	movw	r10, r30
 54e:	b6 01       	movw	r22, r12
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	0e 94 c6 03 	call	0x78c	; 0x78c <fputc>
 556:	21 10       	cpse	r2, r1
 558:	2a 94       	dec	r2
 55a:	21 e0       	ldi	r18, 0x01	; 1
 55c:	82 1a       	sub	r8, r18
 55e:	91 08       	sbc	r9, r1
 560:	81 14       	cp	r8, r1
 562:	91 04       	cpc	r9, r1
 564:	71 f7       	brne	.-36     	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
 566:	e8 c0       	rjmp	.+464    	; 0x738 <__EEPROM_REGION_LENGTH__+0x338>
 568:	84 36       	cpi	r24, 0x64	; 100
 56a:	11 f0       	breq	.+4      	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
 56c:	89 36       	cpi	r24, 0x69	; 105
 56e:	41 f5       	brne	.+80     	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
 570:	f8 01       	movw	r30, r16
 572:	37 fe       	sbrs	r3, 7
 574:	07 c0       	rjmp	.+14     	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
 576:	60 81       	ld	r22, Z
 578:	71 81       	ldd	r23, Z+1	; 0x01
 57a:	82 81       	ldd	r24, Z+2	; 0x02
 57c:	93 81       	ldd	r25, Z+3	; 0x03
 57e:	0c 5f       	subi	r16, 0xFC	; 252
 580:	1f 4f       	sbci	r17, 0xFF	; 255
 582:	08 c0       	rjmp	.+16     	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
 584:	60 81       	ld	r22, Z
 586:	71 81       	ldd	r23, Z+1	; 0x01
 588:	07 2e       	mov	r0, r23
 58a:	00 0c       	add	r0, r0
 58c:	88 0b       	sbc	r24, r24
 58e:	99 0b       	sbc	r25, r25
 590:	0e 5f       	subi	r16, 0xFE	; 254
 592:	1f 4f       	sbci	r17, 0xFF	; 255
 594:	f3 2d       	mov	r31, r3
 596:	ff 76       	andi	r31, 0x6F	; 111
 598:	3f 2e       	mov	r3, r31
 59a:	97 ff       	sbrs	r25, 7
 59c:	09 c0       	rjmp	.+18     	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
 59e:	90 95       	com	r25
 5a0:	80 95       	com	r24
 5a2:	70 95       	com	r23
 5a4:	61 95       	neg	r22
 5a6:	7f 4f       	sbci	r23, 0xFF	; 255
 5a8:	8f 4f       	sbci	r24, 0xFF	; 255
 5aa:	9f 4f       	sbci	r25, 0xFF	; 255
 5ac:	f0 68       	ori	r31, 0x80	; 128
 5ae:	3f 2e       	mov	r3, r31
 5b0:	2a e0       	ldi	r18, 0x0A	; 10
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	a3 01       	movw	r20, r6
 5b6:	0e 94 02 04 	call	0x804	; 0x804 <__ultoa_invert>
 5ba:	88 2e       	mov	r8, r24
 5bc:	86 18       	sub	r8, r6
 5be:	45 c0       	rjmp	.+138    	; 0x64a <__EEPROM_REGION_LENGTH__+0x24a>
 5c0:	85 37       	cpi	r24, 0x75	; 117
 5c2:	31 f4       	brne	.+12     	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
 5c4:	23 2d       	mov	r18, r3
 5c6:	2f 7e       	andi	r18, 0xEF	; 239
 5c8:	b2 2e       	mov	r11, r18
 5ca:	2a e0       	ldi	r18, 0x0A	; 10
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	25 c0       	rjmp	.+74     	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
 5d0:	93 2d       	mov	r25, r3
 5d2:	99 7f       	andi	r25, 0xF9	; 249
 5d4:	b9 2e       	mov	r11, r25
 5d6:	8f 36       	cpi	r24, 0x6F	; 111
 5d8:	c1 f0       	breq	.+48     	; 0x60a <__EEPROM_REGION_LENGTH__+0x20a>
 5da:	18 f4       	brcc	.+6      	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
 5dc:	88 35       	cpi	r24, 0x58	; 88
 5de:	79 f0       	breq	.+30     	; 0x5fe <__EEPROM_REGION_LENGTH__+0x1fe>
 5e0:	b5 c0       	rjmp	.+362    	; 0x74c <__EEPROM_REGION_LENGTH__+0x34c>
 5e2:	80 37       	cpi	r24, 0x70	; 112
 5e4:	19 f0       	breq	.+6      	; 0x5ec <__EEPROM_REGION_LENGTH__+0x1ec>
 5e6:	88 37       	cpi	r24, 0x78	; 120
 5e8:	21 f0       	breq	.+8      	; 0x5f2 <__EEPROM_REGION_LENGTH__+0x1f2>
 5ea:	b0 c0       	rjmp	.+352    	; 0x74c <__EEPROM_REGION_LENGTH__+0x34c>
 5ec:	e9 2f       	mov	r30, r25
 5ee:	e0 61       	ori	r30, 0x10	; 16
 5f0:	be 2e       	mov	r11, r30
 5f2:	b4 fe       	sbrs	r11, 4
 5f4:	0d c0       	rjmp	.+26     	; 0x610 <__EEPROM_REGION_LENGTH__+0x210>
 5f6:	fb 2d       	mov	r31, r11
 5f8:	f4 60       	ori	r31, 0x04	; 4
 5fa:	bf 2e       	mov	r11, r31
 5fc:	09 c0       	rjmp	.+18     	; 0x610 <__EEPROM_REGION_LENGTH__+0x210>
 5fe:	34 fe       	sbrs	r3, 4
 600:	0a c0       	rjmp	.+20     	; 0x616 <__EEPROM_REGION_LENGTH__+0x216>
 602:	29 2f       	mov	r18, r25
 604:	26 60       	ori	r18, 0x06	; 6
 606:	b2 2e       	mov	r11, r18
 608:	06 c0       	rjmp	.+12     	; 0x616 <__EEPROM_REGION_LENGTH__+0x216>
 60a:	28 e0       	ldi	r18, 0x08	; 8
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	05 c0       	rjmp	.+10     	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
 610:	20 e1       	ldi	r18, 0x10	; 16
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	02 c0       	rjmp	.+4      	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
 616:	20 e1       	ldi	r18, 0x10	; 16
 618:	32 e0       	ldi	r19, 0x02	; 2
 61a:	f8 01       	movw	r30, r16
 61c:	b7 fe       	sbrs	r11, 7
 61e:	07 c0       	rjmp	.+14     	; 0x62e <__EEPROM_REGION_LENGTH__+0x22e>
 620:	60 81       	ld	r22, Z
 622:	71 81       	ldd	r23, Z+1	; 0x01
 624:	82 81       	ldd	r24, Z+2	; 0x02
 626:	93 81       	ldd	r25, Z+3	; 0x03
 628:	0c 5f       	subi	r16, 0xFC	; 252
 62a:	1f 4f       	sbci	r17, 0xFF	; 255
 62c:	06 c0       	rjmp	.+12     	; 0x63a <__EEPROM_REGION_LENGTH__+0x23a>
 62e:	60 81       	ld	r22, Z
 630:	71 81       	ldd	r23, Z+1	; 0x01
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	0e 5f       	subi	r16, 0xFE	; 254
 638:	1f 4f       	sbci	r17, 0xFF	; 255
 63a:	a3 01       	movw	r20, r6
 63c:	0e 94 02 04 	call	0x804	; 0x804 <__ultoa_invert>
 640:	88 2e       	mov	r8, r24
 642:	86 18       	sub	r8, r6
 644:	fb 2d       	mov	r31, r11
 646:	ff 77       	andi	r31, 0x7F	; 127
 648:	3f 2e       	mov	r3, r31
 64a:	36 fe       	sbrs	r3, 6
 64c:	0d c0       	rjmp	.+26     	; 0x668 <__EEPROM_REGION_LENGTH__+0x268>
 64e:	23 2d       	mov	r18, r3
 650:	2e 7f       	andi	r18, 0xFE	; 254
 652:	a2 2e       	mov	r10, r18
 654:	89 14       	cp	r8, r9
 656:	58 f4       	brcc	.+22     	; 0x66e <__EEPROM_REGION_LENGTH__+0x26e>
 658:	34 fe       	sbrs	r3, 4
 65a:	0b c0       	rjmp	.+22     	; 0x672 <__EEPROM_REGION_LENGTH__+0x272>
 65c:	32 fc       	sbrc	r3, 2
 65e:	09 c0       	rjmp	.+18     	; 0x672 <__EEPROM_REGION_LENGTH__+0x272>
 660:	83 2d       	mov	r24, r3
 662:	8e 7e       	andi	r24, 0xEE	; 238
 664:	a8 2e       	mov	r10, r24
 666:	05 c0       	rjmp	.+10     	; 0x672 <__EEPROM_REGION_LENGTH__+0x272>
 668:	b8 2c       	mov	r11, r8
 66a:	a3 2c       	mov	r10, r3
 66c:	03 c0       	rjmp	.+6      	; 0x674 <__EEPROM_REGION_LENGTH__+0x274>
 66e:	b8 2c       	mov	r11, r8
 670:	01 c0       	rjmp	.+2      	; 0x674 <__EEPROM_REGION_LENGTH__+0x274>
 672:	b9 2c       	mov	r11, r9
 674:	a4 fe       	sbrs	r10, 4
 676:	0f c0       	rjmp	.+30     	; 0x696 <__EEPROM_REGION_LENGTH__+0x296>
 678:	fe 01       	movw	r30, r28
 67a:	e8 0d       	add	r30, r8
 67c:	f1 1d       	adc	r31, r1
 67e:	80 81       	ld	r24, Z
 680:	80 33       	cpi	r24, 0x30	; 48
 682:	21 f4       	brne	.+8      	; 0x68c <__EEPROM_REGION_LENGTH__+0x28c>
 684:	9a 2d       	mov	r25, r10
 686:	99 7e       	andi	r25, 0xE9	; 233
 688:	a9 2e       	mov	r10, r25
 68a:	09 c0       	rjmp	.+18     	; 0x69e <__EEPROM_REGION_LENGTH__+0x29e>
 68c:	a2 fe       	sbrs	r10, 2
 68e:	06 c0       	rjmp	.+12     	; 0x69c <__EEPROM_REGION_LENGTH__+0x29c>
 690:	b3 94       	inc	r11
 692:	b3 94       	inc	r11
 694:	04 c0       	rjmp	.+8      	; 0x69e <__EEPROM_REGION_LENGTH__+0x29e>
 696:	8a 2d       	mov	r24, r10
 698:	86 78       	andi	r24, 0x86	; 134
 69a:	09 f0       	breq	.+2      	; 0x69e <__EEPROM_REGION_LENGTH__+0x29e>
 69c:	b3 94       	inc	r11
 69e:	a3 fc       	sbrc	r10, 3
 6a0:	11 c0       	rjmp	.+34     	; 0x6c4 <__EEPROM_REGION_LENGTH__+0x2c4>
 6a2:	a0 fe       	sbrs	r10, 0
 6a4:	06 c0       	rjmp	.+12     	; 0x6b2 <__EEPROM_REGION_LENGTH__+0x2b2>
 6a6:	b2 14       	cp	r11, r2
 6a8:	88 f4       	brcc	.+34     	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
 6aa:	28 0c       	add	r2, r8
 6ac:	92 2c       	mov	r9, r2
 6ae:	9b 18       	sub	r9, r11
 6b0:	0e c0       	rjmp	.+28     	; 0x6ce <__EEPROM_REGION_LENGTH__+0x2ce>
 6b2:	b2 14       	cp	r11, r2
 6b4:	60 f4       	brcc	.+24     	; 0x6ce <__EEPROM_REGION_LENGTH__+0x2ce>
 6b6:	b6 01       	movw	r22, r12
 6b8:	80 e2       	ldi	r24, 0x20	; 32
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	0e 94 c6 03 	call	0x78c	; 0x78c <fputc>
 6c0:	b3 94       	inc	r11
 6c2:	f7 cf       	rjmp	.-18     	; 0x6b2 <__EEPROM_REGION_LENGTH__+0x2b2>
 6c4:	b2 14       	cp	r11, r2
 6c6:	18 f4       	brcc	.+6      	; 0x6ce <__EEPROM_REGION_LENGTH__+0x2ce>
 6c8:	2b 18       	sub	r2, r11
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <__EEPROM_REGION_LENGTH__+0x2d0>
 6cc:	98 2c       	mov	r9, r8
 6ce:	21 2c       	mov	r2, r1
 6d0:	a4 fe       	sbrs	r10, 4
 6d2:	10 c0       	rjmp	.+32     	; 0x6f4 <__EEPROM_REGION_LENGTH__+0x2f4>
 6d4:	b6 01       	movw	r22, r12
 6d6:	80 e3       	ldi	r24, 0x30	; 48
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	0e 94 c6 03 	call	0x78c	; 0x78c <fputc>
 6de:	a2 fe       	sbrs	r10, 2
 6e0:	17 c0       	rjmp	.+46     	; 0x710 <__EEPROM_REGION_LENGTH__+0x310>
 6e2:	a1 fc       	sbrc	r10, 1
 6e4:	03 c0       	rjmp	.+6      	; 0x6ec <__EEPROM_REGION_LENGTH__+0x2ec>
 6e6:	88 e7       	ldi	r24, 0x78	; 120
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 6ec:	88 e5       	ldi	r24, 0x58	; 88
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	b6 01       	movw	r22, r12
 6f2:	0c c0       	rjmp	.+24     	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
 6f4:	8a 2d       	mov	r24, r10
 6f6:	86 78       	andi	r24, 0x86	; 134
 6f8:	59 f0       	breq	.+22     	; 0x710 <__EEPROM_REGION_LENGTH__+0x310>
 6fa:	a1 fe       	sbrs	r10, 1
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <__EEPROM_REGION_LENGTH__+0x302>
 6fe:	8b e2       	ldi	r24, 0x2B	; 43
 700:	01 c0       	rjmp	.+2      	; 0x704 <__EEPROM_REGION_LENGTH__+0x304>
 702:	80 e2       	ldi	r24, 0x20	; 32
 704:	a7 fc       	sbrc	r10, 7
 706:	8d e2       	ldi	r24, 0x2D	; 45
 708:	b6 01       	movw	r22, r12
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	0e 94 c6 03 	call	0x78c	; 0x78c <fputc>
 710:	89 14       	cp	r8, r9
 712:	38 f4       	brcc	.+14     	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
 714:	b6 01       	movw	r22, r12
 716:	80 e3       	ldi	r24, 0x30	; 48
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	0e 94 c6 03 	call	0x78c	; 0x78c <fputc>
 71e:	9a 94       	dec	r9
 720:	f7 cf       	rjmp	.-18     	; 0x710 <__EEPROM_REGION_LENGTH__+0x310>
 722:	8a 94       	dec	r8
 724:	f3 01       	movw	r30, r6
 726:	e8 0d       	add	r30, r8
 728:	f1 1d       	adc	r31, r1
 72a:	80 81       	ld	r24, Z
 72c:	b6 01       	movw	r22, r12
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	0e 94 c6 03 	call	0x78c	; 0x78c <fputc>
 734:	81 10       	cpse	r8, r1
 736:	f5 cf       	rjmp	.-22     	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
 738:	22 20       	and	r2, r2
 73a:	09 f4       	brne	.+2      	; 0x73e <__EEPROM_REGION_LENGTH__+0x33e>
 73c:	42 ce       	rjmp	.-892    	; 0x3c2 <vfprintf+0x24>
 73e:	b6 01       	movw	r22, r12
 740:	80 e2       	ldi	r24, 0x20	; 32
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	0e 94 c6 03 	call	0x78c	; 0x78c <fputc>
 748:	2a 94       	dec	r2
 74a:	f6 cf       	rjmp	.-20     	; 0x738 <__EEPROM_REGION_LENGTH__+0x338>
 74c:	f6 01       	movw	r30, r12
 74e:	86 81       	ldd	r24, Z+6	; 0x06
 750:	97 81       	ldd	r25, Z+7	; 0x07
 752:	02 c0       	rjmp	.+4      	; 0x758 <__EEPROM_REGION_LENGTH__+0x358>
 754:	8f ef       	ldi	r24, 0xFF	; 255
 756:	9f ef       	ldi	r25, 0xFF	; 255
 758:	2b 96       	adiw	r28, 0x0b	; 11
 75a:	e2 e1       	ldi	r30, 0x12	; 18
 75c:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__epilogue_restores__>

00000760 <strnlen_P>:
 760:	fc 01       	movw	r30, r24
 762:	05 90       	lpm	r0, Z+
 764:	61 50       	subi	r22, 0x01	; 1
 766:	70 40       	sbci	r23, 0x00	; 0
 768:	01 10       	cpse	r0, r1
 76a:	d8 f7       	brcc	.-10     	; 0x762 <strnlen_P+0x2>
 76c:	80 95       	com	r24
 76e:	90 95       	com	r25
 770:	8e 0f       	add	r24, r30
 772:	9f 1f       	adc	r25, r31
 774:	08 95       	ret

00000776 <strnlen>:
 776:	fc 01       	movw	r30, r24
 778:	61 50       	subi	r22, 0x01	; 1
 77a:	70 40       	sbci	r23, 0x00	; 0
 77c:	01 90       	ld	r0, Z+
 77e:	01 10       	cpse	r0, r1
 780:	d8 f7       	brcc	.-10     	; 0x778 <strnlen+0x2>
 782:	80 95       	com	r24
 784:	90 95       	com	r25
 786:	8e 0f       	add	r24, r30
 788:	9f 1f       	adc	r25, r31
 78a:	08 95       	ret

0000078c <fputc>:
 78c:	0f 93       	push	r16
 78e:	1f 93       	push	r17
 790:	cf 93       	push	r28
 792:	df 93       	push	r29
 794:	fb 01       	movw	r30, r22
 796:	23 81       	ldd	r18, Z+3	; 0x03
 798:	21 fd       	sbrc	r18, 1
 79a:	03 c0       	rjmp	.+6      	; 0x7a2 <fputc+0x16>
 79c:	8f ef       	ldi	r24, 0xFF	; 255
 79e:	9f ef       	ldi	r25, 0xFF	; 255
 7a0:	2c c0       	rjmp	.+88     	; 0x7fa <fputc+0x6e>
 7a2:	22 ff       	sbrs	r18, 2
 7a4:	16 c0       	rjmp	.+44     	; 0x7d2 <fputc+0x46>
 7a6:	46 81       	ldd	r20, Z+6	; 0x06
 7a8:	57 81       	ldd	r21, Z+7	; 0x07
 7aa:	24 81       	ldd	r18, Z+4	; 0x04
 7ac:	35 81       	ldd	r19, Z+5	; 0x05
 7ae:	42 17       	cp	r20, r18
 7b0:	53 07       	cpc	r21, r19
 7b2:	44 f4       	brge	.+16     	; 0x7c4 <fputc+0x38>
 7b4:	a0 81       	ld	r26, Z
 7b6:	b1 81       	ldd	r27, Z+1	; 0x01
 7b8:	9d 01       	movw	r18, r26
 7ba:	2f 5f       	subi	r18, 0xFF	; 255
 7bc:	3f 4f       	sbci	r19, 0xFF	; 255
 7be:	31 83       	std	Z+1, r19	; 0x01
 7c0:	20 83       	st	Z, r18
 7c2:	8c 93       	st	X, r24
 7c4:	26 81       	ldd	r18, Z+6	; 0x06
 7c6:	37 81       	ldd	r19, Z+7	; 0x07
 7c8:	2f 5f       	subi	r18, 0xFF	; 255
 7ca:	3f 4f       	sbci	r19, 0xFF	; 255
 7cc:	37 83       	std	Z+7, r19	; 0x07
 7ce:	26 83       	std	Z+6, r18	; 0x06
 7d0:	14 c0       	rjmp	.+40     	; 0x7fa <fputc+0x6e>
 7d2:	8b 01       	movw	r16, r22
 7d4:	ec 01       	movw	r28, r24
 7d6:	fb 01       	movw	r30, r22
 7d8:	00 84       	ldd	r0, Z+8	; 0x08
 7da:	f1 85       	ldd	r31, Z+9	; 0x09
 7dc:	e0 2d       	mov	r30, r0
 7de:	09 95       	icall
 7e0:	89 2b       	or	r24, r25
 7e2:	e1 f6       	brne	.-72     	; 0x79c <fputc+0x10>
 7e4:	d8 01       	movw	r26, r16
 7e6:	16 96       	adiw	r26, 0x06	; 6
 7e8:	8d 91       	ld	r24, X+
 7ea:	9c 91       	ld	r25, X
 7ec:	17 97       	sbiw	r26, 0x07	; 7
 7ee:	01 96       	adiw	r24, 0x01	; 1
 7f0:	17 96       	adiw	r26, 0x07	; 7
 7f2:	9c 93       	st	X, r25
 7f4:	8e 93       	st	-X, r24
 7f6:	16 97       	sbiw	r26, 0x06	; 6
 7f8:	ce 01       	movw	r24, r28
 7fa:	df 91       	pop	r29
 7fc:	cf 91       	pop	r28
 7fe:	1f 91       	pop	r17
 800:	0f 91       	pop	r16
 802:	08 95       	ret

00000804 <__ultoa_invert>:
 804:	fa 01       	movw	r30, r20
 806:	aa 27       	eor	r26, r26
 808:	28 30       	cpi	r18, 0x08	; 8
 80a:	51 f1       	breq	.+84     	; 0x860 <__ultoa_invert+0x5c>
 80c:	20 31       	cpi	r18, 0x10	; 16
 80e:	81 f1       	breq	.+96     	; 0x870 <__ultoa_invert+0x6c>
 810:	e8 94       	clt
 812:	6f 93       	push	r22
 814:	6e 7f       	andi	r22, 0xFE	; 254
 816:	6e 5f       	subi	r22, 0xFE	; 254
 818:	7f 4f       	sbci	r23, 0xFF	; 255
 81a:	8f 4f       	sbci	r24, 0xFF	; 255
 81c:	9f 4f       	sbci	r25, 0xFF	; 255
 81e:	af 4f       	sbci	r26, 0xFF	; 255
 820:	b1 e0       	ldi	r27, 0x01	; 1
 822:	3e d0       	rcall	.+124    	; 0x8a0 <__ultoa_invert+0x9c>
 824:	b4 e0       	ldi	r27, 0x04	; 4
 826:	3c d0       	rcall	.+120    	; 0x8a0 <__ultoa_invert+0x9c>
 828:	67 0f       	add	r22, r23
 82a:	78 1f       	adc	r23, r24
 82c:	89 1f       	adc	r24, r25
 82e:	9a 1f       	adc	r25, r26
 830:	a1 1d       	adc	r26, r1
 832:	68 0f       	add	r22, r24
 834:	79 1f       	adc	r23, r25
 836:	8a 1f       	adc	r24, r26
 838:	91 1d       	adc	r25, r1
 83a:	a1 1d       	adc	r26, r1
 83c:	6a 0f       	add	r22, r26
 83e:	71 1d       	adc	r23, r1
 840:	81 1d       	adc	r24, r1
 842:	91 1d       	adc	r25, r1
 844:	a1 1d       	adc	r26, r1
 846:	20 d0       	rcall	.+64     	; 0x888 <__ultoa_invert+0x84>
 848:	09 f4       	brne	.+2      	; 0x84c <__ultoa_invert+0x48>
 84a:	68 94       	set
 84c:	3f 91       	pop	r19
 84e:	2a e0       	ldi	r18, 0x0A	; 10
 850:	26 9f       	mul	r18, r22
 852:	11 24       	eor	r1, r1
 854:	30 19       	sub	r19, r0
 856:	30 5d       	subi	r19, 0xD0	; 208
 858:	31 93       	st	Z+, r19
 85a:	de f6       	brtc	.-74     	; 0x812 <__ultoa_invert+0xe>
 85c:	cf 01       	movw	r24, r30
 85e:	08 95       	ret
 860:	46 2f       	mov	r20, r22
 862:	47 70       	andi	r20, 0x07	; 7
 864:	40 5d       	subi	r20, 0xD0	; 208
 866:	41 93       	st	Z+, r20
 868:	b3 e0       	ldi	r27, 0x03	; 3
 86a:	0f d0       	rcall	.+30     	; 0x88a <__ultoa_invert+0x86>
 86c:	c9 f7       	brne	.-14     	; 0x860 <__ultoa_invert+0x5c>
 86e:	f6 cf       	rjmp	.-20     	; 0x85c <__ultoa_invert+0x58>
 870:	46 2f       	mov	r20, r22
 872:	4f 70       	andi	r20, 0x0F	; 15
 874:	40 5d       	subi	r20, 0xD0	; 208
 876:	4a 33       	cpi	r20, 0x3A	; 58
 878:	18 f0       	brcs	.+6      	; 0x880 <__ultoa_invert+0x7c>
 87a:	49 5d       	subi	r20, 0xD9	; 217
 87c:	31 fd       	sbrc	r19, 1
 87e:	40 52       	subi	r20, 0x20	; 32
 880:	41 93       	st	Z+, r20
 882:	02 d0       	rcall	.+4      	; 0x888 <__ultoa_invert+0x84>
 884:	a9 f7       	brne	.-22     	; 0x870 <__ultoa_invert+0x6c>
 886:	ea cf       	rjmp	.-44     	; 0x85c <__ultoa_invert+0x58>
 888:	b4 e0       	ldi	r27, 0x04	; 4
 88a:	a6 95       	lsr	r26
 88c:	97 95       	ror	r25
 88e:	87 95       	ror	r24
 890:	77 95       	ror	r23
 892:	67 95       	ror	r22
 894:	ba 95       	dec	r27
 896:	c9 f7       	brne	.-14     	; 0x88a <__ultoa_invert+0x86>
 898:	00 97       	sbiw	r24, 0x00	; 0
 89a:	61 05       	cpc	r22, r1
 89c:	71 05       	cpc	r23, r1
 89e:	08 95       	ret
 8a0:	9b 01       	movw	r18, r22
 8a2:	ac 01       	movw	r20, r24
 8a4:	0a 2e       	mov	r0, r26
 8a6:	06 94       	lsr	r0
 8a8:	57 95       	ror	r21
 8aa:	47 95       	ror	r20
 8ac:	37 95       	ror	r19
 8ae:	27 95       	ror	r18
 8b0:	ba 95       	dec	r27
 8b2:	c9 f7       	brne	.-14     	; 0x8a6 <__ultoa_invert+0xa2>
 8b4:	62 0f       	add	r22, r18
 8b6:	73 1f       	adc	r23, r19
 8b8:	84 1f       	adc	r24, r20
 8ba:	95 1f       	adc	r25, r21
 8bc:	a0 1d       	adc	r26, r0
 8be:	08 95       	ret

000008c0 <__prologue_saves__>:
 8c0:	2f 92       	push	r2
 8c2:	3f 92       	push	r3
 8c4:	4f 92       	push	r4
 8c6:	5f 92       	push	r5
 8c8:	6f 92       	push	r6
 8ca:	7f 92       	push	r7
 8cc:	8f 92       	push	r8
 8ce:	9f 92       	push	r9
 8d0:	af 92       	push	r10
 8d2:	bf 92       	push	r11
 8d4:	cf 92       	push	r12
 8d6:	df 92       	push	r13
 8d8:	ef 92       	push	r14
 8da:	ff 92       	push	r15
 8dc:	0f 93       	push	r16
 8de:	1f 93       	push	r17
 8e0:	cf 93       	push	r28
 8e2:	df 93       	push	r29
 8e4:	cd b7       	in	r28, 0x3d	; 61
 8e6:	de b7       	in	r29, 0x3e	; 62
 8e8:	ca 1b       	sub	r28, r26
 8ea:	db 0b       	sbc	r29, r27
 8ec:	0f b6       	in	r0, 0x3f	; 63
 8ee:	f8 94       	cli
 8f0:	de bf       	out	0x3e, r29	; 62
 8f2:	0f be       	out	0x3f, r0	; 63
 8f4:	cd bf       	out	0x3d, r28	; 61
 8f6:	09 94       	ijmp

000008f8 <__epilogue_restores__>:
 8f8:	2a 88       	ldd	r2, Y+18	; 0x12
 8fa:	39 88       	ldd	r3, Y+17	; 0x11
 8fc:	48 88       	ldd	r4, Y+16	; 0x10
 8fe:	5f 84       	ldd	r5, Y+15	; 0x0f
 900:	6e 84       	ldd	r6, Y+14	; 0x0e
 902:	7d 84       	ldd	r7, Y+13	; 0x0d
 904:	8c 84       	ldd	r8, Y+12	; 0x0c
 906:	9b 84       	ldd	r9, Y+11	; 0x0b
 908:	aa 84       	ldd	r10, Y+10	; 0x0a
 90a:	b9 84       	ldd	r11, Y+9	; 0x09
 90c:	c8 84       	ldd	r12, Y+8	; 0x08
 90e:	df 80       	ldd	r13, Y+7	; 0x07
 910:	ee 80       	ldd	r14, Y+6	; 0x06
 912:	fd 80       	ldd	r15, Y+5	; 0x05
 914:	0c 81       	ldd	r16, Y+4	; 0x04
 916:	1b 81       	ldd	r17, Y+3	; 0x03
 918:	aa 81       	ldd	r26, Y+2	; 0x02
 91a:	b9 81       	ldd	r27, Y+1	; 0x01
 91c:	ce 0f       	add	r28, r30
 91e:	d1 1d       	adc	r29, r1
 920:	0f b6       	in	r0, 0x3f	; 63
 922:	f8 94       	cli
 924:	de bf       	out	0x3e, r29	; 62
 926:	0f be       	out	0x3f, r0	; 63
 928:	cd bf       	out	0x3d, r28	; 61
 92a:	ed 01       	movw	r28, r26
 92c:	08 95       	ret

0000092e <_exit>:
 92e:	f8 94       	cli

00000930 <__stop_program>:
 930:	ff cf       	rjmp	.-2      	; 0x930 <__stop_program>
