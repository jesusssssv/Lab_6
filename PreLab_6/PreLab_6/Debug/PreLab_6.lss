
PreLab_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00000258  000002ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000258  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080015c  0080015c  00000348  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b17  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098f  00000000  00000000  00000f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e4  00000000  00000000  000018ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001c94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bc  00000000  00000000  00001d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000112  00000000  00000000  0000221c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000232e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_18>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 e5       	ldi	r30, 0x58	; 88
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ac 35       	cpi	r26, 0x5C	; 92
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ac e5       	ldi	r26, 0x5C	; 92
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ae 35       	cpi	r26, 0x5E	; 94
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 c2 00 	call	0x184	; 0x184 <main>
  ea:	0c 94 2a 01 	jmp	0x254	; 0x254 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <initUART>:
    UBRR0 = 207;
}

void writeUART(char caracter){
    while(!(UCSR0A & (1<<UDRE0)));
    UDR0 = caracter;
  f2:	8a b1       	in	r24, 0x0a	; 10
  f4:	8e 7f       	andi	r24, 0xFE	; 254
  f6:	8a b9       	out	0x0a, r24	; 10
  f8:	8a b1       	in	r24, 0x0a	; 10
  fa:	82 60       	ori	r24, 0x02	; 2
  fc:	8a b9       	out	0x0a, r24	; 10
  fe:	e0 ec       	ldi	r30, 0xC0	; 192
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	10 82       	st	Z, r1
 104:	80 81       	ld	r24, Z
 106:	82 60       	ori	r24, 0x02	; 2
 108:	80 83       	st	Z, r24
 10a:	e1 ec       	ldi	r30, 0xC1	; 193
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	10 82       	st	Z, r1
 110:	80 81       	ld	r24, Z
 112:	88 69       	ori	r24, 0x98	; 152
 114:	80 83       	st	Z, r24
 116:	e2 ec       	ldi	r30, 0xC2	; 194
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	10 82       	st	Z, r1
 11c:	80 81       	ld	r24, Z
 11e:	86 60       	ori	r24, 0x06	; 6
 120:	80 83       	st	Z, r24
 122:	8f ec       	ldi	r24, 0xCF	; 207
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 12a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 12e:	08 95       	ret

00000130 <writeTextUART>:
}
    
void writeTextUART(char* texto){
 130:	ac 01       	movw	r20, r24
    uint8_t i;
    for (i=0; texto[i] != '\0'; i++){
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	07 c0       	rjmp	.+14     	; 0x144 <writeTextUART+0x14>
        while(!(UCSR0A&(1<<UDRE0)));
 136:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 13a:	95 ff       	sbrs	r25, 5
 13c:	fc cf       	rjmp	.-8      	; 0x136 <writeTextUART+0x6>
        UDR0 = texto[i];
 13e:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    UDR0 = caracter;
}
    
void writeTextUART(char* texto){
    uint8_t i;
    for (i=0; texto[i] != '\0'; i++){
 142:	2f 5f       	subi	r18, 0xFF	; 255
 144:	fa 01       	movw	r30, r20
 146:	e2 0f       	add	r30, r18
 148:	f1 1d       	adc	r31, r1
 14a:	30 81       	ld	r19, Z
 14c:	31 11       	cpse	r19, r1
 14e:	f3 cf       	rjmp	.-26     	; 0x136 <writeTextUART+0x6>
        while(!(UCSR0A&(1<<UDRE0)));
        UDR0 = texto[i];
    }
}
 150:	08 95       	ret

00000152 <asciiVal>:
    } else if (buffLast > 255) {
        buffLast = 255; // Limitar a 255 si es mayor
    }

    // Desplazamiento de bits
    PORTD = (buffLast << 2) & 0xFC; // Muestra los bits 2-7 en PORTD (PD2 a PD7)
 152:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	8b b9       	out	0x0b, r24	; 11
    PORTB = (buffLast >> 6) & 0x03; // Muestra los bits 6-7 en PORTB (PB0 y PB1)
 162:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 166:	82 95       	swap	r24
 168:	86 95       	lsr	r24
 16a:	86 95       	lsr	r24
 16c:	83 70       	andi	r24, 0x03	; 3
 16e:	85 b9       	out	0x05, r24	; 5
 170:	08 95       	ret

00000172 <MenuL0>:
}

void MenuL0(){
    writeTextUART("\nElige una opción:\n");
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	0e 94 98 00 	call	0x130	; 0x130 <writeTextUART>
    writeTextUART("1. Enviar Ascii\n");
 17a:	85 e1       	ldi	r24, 0x15	; 21
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 98 00 	call	0x130	; 0x130 <writeTextUART>
 182:	08 95       	ret

00000184 <main>:

volatile char bufferRX;

int main(void)
{
    initUART();
 184:	0e 94 79 00 	call	0xf2	; 0xf2 <initUART>
    
    sei();
 188:	78 94       	sei
    DDRD = 0xFF;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	8a b9       	out	0x0a, r24	; 10
    DDRB = 0xFF;
 18e:	84 b9       	out	0x04, r24	; 4
    
    MenuL0();
 190:	0e 94 b9 00 	call	0x172	; 0x172 <MenuL0>
    PORTD = 0;
 194:	1b b8       	out	0x0b, r1	; 11
    PORTB = 0;
 196:	15 b8       	out	0x05, r1	; 5
    
    while (1){
        asciiVal();
 198:	0e 94 a9 00 	call	0x152	; 0x152 <asciiVal>
 19c:	fd cf       	rjmp	.-6      	; 0x198 <main+0x14>

0000019e <__vector_18>:
        while(!(UCSR0A&(1<<UDRE0)));
        UDR0 = texto[i];
    }
}

ISR(USART0_RX_vect){
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
    bufferRX = UDR0;
 1c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1c4:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <bufferRX>
    if(StateAscii >= 1) {
 1c8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 1cc:	88 23       	and	r24, r24
 1ce:	39 f0       	breq	.+14     	; 0x1de <__vector_18+0x40>
        PORTB |= (1<<PB5);
 1d0:	85 b1       	in	r24, 0x05	; 5
 1d2:	80 62       	ori	r24, 0x20	; 32
 1d4:	85 b9       	out	0x05, r24	; 5
        buffLast = bufferRX;
 1d6:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <bufferRX>
 1da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    }
    while(!(UCSR0A&(1<<UDRE0)));
 1de:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1e2:	85 ff       	sbrs	r24, 5
 1e4:	fc cf       	rjmp	.-8      	; 0x1de <__vector_18+0x40>
    UDR0 = bufferRX;
 1e6:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <bufferRX>
 1ea:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    if (StateAscii >= 1){
 1ee:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 1f2:	88 23       	and	r24, r24
 1f4:	49 f0       	breq	.+18     	; 0x208 <__vector_18+0x6a>
        StateAscii++;
 1f6:	8f 5f       	subi	r24, 0xFF	; 255
 1f8:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
        if (StateAscii >= 2){
 1fc:	82 30       	cpi	r24, 0x02	; 2
 1fe:	20 f0       	brcs	.+8      	; 0x208 <__vector_18+0x6a>
            StateAscii = 0;
 200:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end>
            MenuL0();
 204:	0e 94 b9 00 	call	0x172	; 0x172 <MenuL0>
        }
    }
    if (bufferRX == '1'){
 208:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <bufferRX>
 20c:	81 33       	cpi	r24, 0x31	; 49
 20e:	89 f4       	brne	.+34     	; 0x232 <__vector_18+0x94>
        if (StateAscii == 0){
 210:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 214:	81 11       	cpse	r24, r1
 216:	0d c0       	rjmp	.+26     	; 0x232 <__vector_18+0x94>
            writeTextUART("\nAscci\n");
 218:	86 e2       	ldi	r24, 0x26	; 38
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 98 00 	call	0x130	; 0x130 <writeTextUART>
            writeTextUART("\nEscribe tu código Ascii Bombardini Gussini:\n");
 220:	8e e2       	ldi	r24, 0x2E	; 46
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 98 00 	call	0x130	; 0x130 <writeTextUART>
            StateAscii = 1;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
            PORTD = 0;
 22e:	1b b8       	out	0x0b, r1	; 11
            PORTB = 0;
 230:	15 b8       	out	0x05, r1	; 5
        }
    }
}
 232:	ff 91       	pop	r31
 234:	ef 91       	pop	r30
 236:	bf 91       	pop	r27
 238:	af 91       	pop	r26
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	7f 91       	pop	r23
 240:	6f 91       	pop	r22
 242:	5f 91       	pop	r21
 244:	4f 91       	pop	r20
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
